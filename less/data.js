const books = [
  new Book('JS Полное руководство(Фланаган)', 'https://drive.google.com/file/d/1MYq0kJzCVZ_uKGa5D7IcRDgeisKpl6Nf/view?usp=share_link'),
];
const all_lessons = [];

add_lesson(
  [
    ['JS ориентированный на..', '..значение'],
    ['От куда у цифр метод toString() ?', 'String, Boolean, Number неявно берутся в обёртку своих конструкторов. Они то и дают эти методы: new Number(), new String() new Boolean(). Это нужно для внутреннего использования.'],
    ['Hoisting', 'Поднятие или hoisting — это механизм в JavaScript, в котором переменные и объявления функций, передвигаются вверх своей области видимости перед тем, как код будет выполнен'],
  ],
  [books[0]],
  [
    ['Читать 1-5 главы', 0],
  ],
);

add_lesson( 
  [
    ['console в JS это..', '..объект. Так же можно вызвать .error(error_text)'],
    ['Все способы создать объект', 'Object.create()<br>new Object();<br>{}'],
    ['JSON', 'JS Object Notation<br> это облегченный формат обмена данными. Людям легко читать и писать. Машины легко анализируют и генерируют. Он основан на подмножестве стандарта языка программирования JavaScript. JSON — это текстовый формат, который полностью не зависит от языка, но использует соглашения, знакомые программистам языков семейства C, включая C, C++, C#, Java, JavaScript, Perl, Python и многие другие. Эти свойства делают JSON идеальным языком обмена данными.'],
  ], 
  [books[0]],
  [
    ['читать 6, 7 главы', 0],
    ['Создать объект всеми возможностями'],
    ['Скопировать объект 1:1'],
  ],
);

add_lesson( 
  [
    ['<s>eval()</s>', 'eval() - опасная функция, которая выполняет код, проходящий со всеми привилегиями вызывателя.<br>"eval is evil"'],
    ['Скопировать массив', 'Array.from(arr_name)'],
  ]
);

add_lesson( 
  [
    ['function expression', 'let say_hi = function() {console.log("hi!")}'],
    ['function declaration', 'function join() {console.log("join..")}<br>Существуют в block scope'],
    ['arrow function', 'let paint = () => {console.log("painting..")}<br>Не имеет this, super, new, arguments'],
  ], 
  [books[0]], 
  [
    ['Глава 8', 0],
    ['function moo(a, cb) {<br>return a * cb;<br>}<br>moo(4, (b) => {return b;})<br> -- <br>Переделать так, чтобы при вызове moo(4)(5) выдал 20'],
    ['Написать программу, которая возвращает цифры<br>(1-100 % 5 == 0 + 1-100 % 3 == 0) / 2'],
    ['Функциональное программирование(Google)'],
  ],
);

add_lesson( 
  [
    ['This in function', 'Если вывести this в консоль из функции то в строгом режиме выдаст пустую строку. А в обычном либо window(browser), либо global(Node js)'],
    ['This work in..', '..runtime'],
    ['Функция конструктор', 'new foo();<br>стрелочная функция не может быть конструктором, потму что не имеет new/this'],
    ['new.target()', 'function User() {console.log(new.target())}<br>new User(); // покажет функцию в строковом формате<br>User() // undefined'],
  ], 
  null, 
  [
    ['Реферат по всем методам всех стандартных типов'],
  ],
);

add_lesson(
  [
    ['charAt()','Возвращает символ по указанному индексу (позиции)'],
    ['charCodeAt()','Возвращает Unicode символа по указанному индексу'],
    ['concat()','Возвращает две или более объединенных строк'],
    ['конструктор','Возвращает функцию-конструктор строки'],
    ['endsWith()','Возвращает значение, если строка заканчивается указанным значением'],
    ['fromCharCode()','Возвращает значения Юникода в виде символов'],
    ['includes()','Возвращает значение, если строка содержит указанное значение'],
    ['indexOf()','Возвращает индекс (позицию) первого вхождения значения в строку'],
    ['lastIndexOf()','Возвращает индекс (позицию) последнего вхождения значения в строку'],
    ['длина','Возвращает длину строки'],
    ['localeCompare()','Сравнивает две строки в текущей локали'],
    ['match()','Ищет в строке значение или регулярное выражение и возвращает совпадения'],
    ['prototype','Позволяет добавлять свойства и методы к объекту'],
    ['repeat()','Возвращает новую строку с количеством копий строки'],
    ['replace()','Ищет в строке значение или регулярное выражение и возвращает строку, в которой значения заменены'],
    ['search()','Ищет в строке значение или регулярное выражение и возвращает индекс (позицию) совпадения'],
    ['slice()','Извлекает часть строки и возвращает новую строку'],
    ['split()','Разбивает строку на массив подстрок'],
    ['startsWith()','Проверяет, начинается ли строка с указанных символов'],
    ['substr()','Извлекает количество символов из строки, из начального индекса (позиции)'],
    ['substring()','Извлекает символы из строки между двумя указанными индексами (позициями)'],
    ['toLocaleLowerCase()','Возвращает строку, преобразованную в строчные буквы с использованием локали хоста'],
    ['toLocaleUpperCase()','Возвращает строку, преобразованную в прописные буквы с использованием языкового стандарта хоста'],
    ['toLowerCase()','Возвращает строку, преобразованную в строчные буквы'],
    ['toString()','Возвращает строку или строковый объект в виде строки'],
    ['toUpperCase()','Возвращает строку, преобразованную в прописные буквы'],
    ['trim()','Возвращает строку с удаленными пробелами'],
    ['trimEnd()','Возвращает строку с удаленными пробелами с конца'],
    ['trimStart()','Возвращает строку с удаленными пробелами с самого начала'],
    ['valueOf()','Возвращает примитивное значение строки или строкового объекта'],
  ]
);

add_lesson(
  [
    ['concat()','Объединяет массивы и возвращает массив с объединенными массивами'],
    ['constructor','Возвращает функцию, которая создала прототип объекта Array'],
    ['copyWithin()','Копирует элементы массива внутри массива в указанные позиции и обратно'],
    ['entries()','Возвращает объект итерации массива пары ключ/значение'],
    ['every()','Проверяет, прошел ли тест каждый элемент массива'],
    ['fill()','Заполнить элементы массива статическим значением'],
    ['filter()','Создает новый массив с каждым элементом массива, прошедшим проверку'],
    ['find()','Возвращает значение первого элемента массива, прошедшего проверку'],
    ['findIndex()','Возвращает индекс первого элемента массива, прошедшего проверку'],
    ['forEach()','Вызывает функцию для каждого элемента массива'],
    ['from()','Создает массив из объекта'],
    ['includes()','Проверить, содержит ли массив указанный элемент'],
    ['indexOf()','Поиск элемента в массиве и возврат его позиции'],
    ['isArray()','Проверяет, является ли объект массивом'],
    ['join()','Объединяет все элементы массива в строку'],
    ['keys()','Возвращает объект итерации массива, содержащий ключи исходного массива'],
    ['lastIndexOf()','Поиск элемента в массиве, начиная с конца, и возвращает его позицию'],
    ['length','Устанавливает или возвращает количество элементов в массиве'],
    ['map()','Создает новый массив с результатом вызова функции для каждого элемента массива'],
    ['pop()','Удаляет последний элемент массива и возвращает этот элемент'],
    ['prototype','Позволяет добавлять свойства и методы к объекту Array'],
    ['push()','Добавляет новые элементы в конец массива и возвращает новую длину'],
    ['reduce()','Уменьшить значения массива до одного значения (слева направо)'],
    ['reduceRight()','Уменьшить значения массива до одного значения (идущего справа налево)'],
    ['reverse()','Обратный порядок элементов в массиве'],
    ['shift()','Удаляет первый элемент массива и возвращает этот элемент'],
    ['slice()','Выбирает часть массива и возвращает новый массив'],
    ['some()','Проверяет, прошел ли какой-либо из элементов массива проверку'],
    ['sort()','Сортирует элементы массива'],
    ['splice()','Добавляет/удаляет элементы из массива'],
    ['toString()','Преобразует массив в строку и возвращает результат'],
    ['unshift()','Добавляет новые элементы в начало массива и возвращает новую длину'],
    ['valueOf()','Возвращает примитивное значение массива'],
  ]
);

add_lesson(
  [
    ['constructor','Возвращает функцию, создавшую прототип числа JavaScript'],
    ['EPSILON','Возвращает разницу между 1 и наименьшим числом'],
    ['isFinite()','Проверяет, является ли значение конечным числом'],
    ['isInteger()','Проверяет, является ли значение целым числом'],
    ['isNaN()','Проверяет, является ли значение числом.NaN'],
    ['isSafeInteger()','Проверяет, является ли значение безопасным целым числом'],
    ['MAX_SAFE_INTEGER','Возвращает максимальное безопасное целое число в JavaScript.'],
    ['MIN_SAFE_INTEGER','Возвращает минимальное безопасное целое число в JavaScript.'],
    ['MAX_VALUE','Возвращает максимально возможное число в JavaScript'],
    ['MIN_VALUE','Возвращает наименьшее возможное число в JavaScript'],
    ['NaN','Представляет значение "не число"'],
    ['NEGATIVE_INFINITY','Представляет отрицательную бесконечность (возвращается при переполнении)'],
    ['POSITIVE_INFINITY','Представляет бесконечность (возвращается при переполнении)'],
    ['parseFloat()','Разбирает строку и возвращает число'],
    ['parseInt()','Разбирает строку и возвращает целое число'],
    ['prototype','Позволяет добавлять свойства и методы к объекту'],
    ['toExponential(x)','Преобразует число в экспоненциальное представление'],
    ['toFixed(x)','Форматирует число с x количеством цифр после запятой'],
    ['toLocaleString()','Преобразует число в строку на основе настроек локали'],
    ['toPrecision(x)','Форматирует число до x длины'],
    ['toString()','Преобразует число в строку'],
    ['valueOf()','Возвращает примитивное значение числа'],
  ]
);

add_lesson([
  ['constructor','Возвращает функцию, которая создала логический прототип JavaScript'],
  ['prototype','Позволяет добавлять свойства и методы к логическому прототипу'],
  ['toString()','Преобразует логическое значение в строку и возвращает результат'],
  ['valueOf()','Возвращает примитивное значение логического значения'],
]);

add_lesson([
  ['конструктор','Возвращает функцию, создавшую прототип объекта'],
  ['keys()','Возвращает объект Array Iterator с ключами объекта'],
  ['prototype','Позволяет добавлять свойства и методы к объектам JavaScript'],
  ['toString()','Преобразует объект в строку и возвращает результат'],
  ['valueOf()','Возвращает примитивное значение объекта'],
]);

add_lesson([
  ['abs(x)','Возвращает абсолютное значение x'],
  ['acos(x)','Возвращает арккосинус x в радианах'],
  ['acosh(x)','Возвращает гиперболический арккосинус x'],
  ['asin(x)','Возвращает арксинус x в радианах'],
  ['asinh(x)','Возвращает гиперболический арксинус x'],
  ['atan(x)','Возвращает арктангенс x как числовое значение между -PI/2 и PI/2 радиан'],
  ['atan2(y, x)','Возвращает арктангенс частного своих аргументов'],
  ['atanh(x)','Возвращает гиперболический арктангенс x'],
  ['cbrt(x)','Возвращает кубический корень из x'],
  ['ceil(x)','Возвращает x, округленное вверх до ближайшего целого числа'],
  ['clz32(x)','Возвращает количество ведущих нулей в 32-битном двоичном представлении x'],
  ['cos(x)','Возвращает косинус x (x в радианах)'],
  ['cosh(x)','Возвращает гиперболический косинус x'],
  ['E','Возвращает число Эйлера (приблизительно 2,718)'],
  ['exp(x)','Возвращает значение E<sup>x</sup>'],
  ['expm1(x)','Возвращает значение E<sup>x</sup> минус 1'],
  ['floor(x)','Возвращает x, округленное в меньшую сторону до ближайшего целого числа'],
  ['fround(x)','Возвращает ближайшее (32-битное одинарной точности) представление числа с плавающей запятой'],
  ['LN2','Возвращает натуральный логарифм 2 (приблизительно 0,693)'],
  ['LN10','Возвращает натуральный логарифм 10 (приблизительно 2,302)'],
  ['log(x)','Возвращает натуральный логарифм x'],
  ['log10(x)','Возвращает десятичный логарифм числа x'],
  ['LOG10E','Возвращает логарифм E по основанию 10 (приблизительно 0,434)'],
  ['log1p(x)','Возвращает натуральный логарифм 1 + x'],
  ['log2(x)','Возвращает логарифм x по основанию 2'],
  ['LOG2E','Возвращает логарифм E по основанию 2 (приблизительно 1,442)'],
  ['max(x1,x2,..)','Возвращает число с наибольшим значением'],
  ['min(x1,x2,..)','Возвращает число с наименьшим значением'],
  ['PI','Возвращает PI (прибл. 3.14)'],
  ['pow(x, y)','Возвращает значение x в степени y'],
  ['random()','Возвращает случайное число от 0 до 1'],
  ['round(x)','Округляет x до ближайшего целого числа'],
  ['sign(x)','Возвращает знак числа (проверяет, является ли оно положительным, отрицательным или нулем)'],
  ['sin(x)','Возвращает синус x (x в радианах)'],
  ['sinh(x)','Возвращает гиперболический синус x'],
  ['sqrt(x)','Возвращает квадратный корень из x'],
  ['SQRT1_2','Возвращает квадратный корень из 1/2 (приблизительно 0,707)'],
  ['SQRT2','Возвращает квадратный корень из 2 (приблизительно 1,414)'],
  ['tan(x)','Возвращает тангенс угла'],
  ['tanh(x)','Возвращает гиперболический тангенс числа'],
  ['trunc(x)','Возвращает целую часть числа (x)'],
]);

add_lesson(
  [
    ['for()', 'ищет ранее созданный разделяемый символ по заданному ключу и возвращает его, если он найден. В противном случае создаётся новый разделяемый символ для данного ключа в глобальном реестре символов.'],
    ['keyFor()', 'получает ключ для заданного символа из глобального реестра символов.'],
    ['toString()', 'возвращает строку, представляющую указанное значение символа.'],
    ['valueOf()', 'возвращает примитивное значение объекта Symbol.'],
    ['getOwnPropertySymbol(obj_name)', 'Возвращает массив с Symbol'],
  ]
);

add_lesson(
  [
    ['asIntN()', 'это статический метод, который позволяет перенести BigInt-значение в целое число со знаком между -2ширина-1 and 2ширина-1-1.'],
    ['asUintN()', 'Статический метод используется для переноса значения BigInt BigInt.asUintNв целое число без знака в диапазоне от 0 до 2width-1.'],
    ['prototype.toLocaleString()', 'Метод toLocaleString()возвращает строку с языковым представлением этого BigInt. В реализациях с поддержкой Intl.NumberFormatAPI этот метод просто вызывает Intl.NumberFormat.'],
    ['prototype.toString()', 'возвращает строку, представляющую указанное BigIntзначение. Завершающий «n» не является частью строки.'],
    ['prototype.valueOf()', 'возвращает обернутое примитивное значение BigIntобъекта.'],
  ]
);

add_lesson(
  [
    ['getFullYear()', 'Получить год в виде четырехзначного числа'],
    ['getMonth()', 'Получить месяц как число (0-11)'],
    ['getDate()', 'Получить день как число (1-31)'],
    ['getDay()', 'Получить день недели в виде числа (0-6)'],
    ['getHours()', 'Получить час (0-23)'],
    ['getMinutes()', 'Получить минуты (0-59)'],
    ['getSeconds()', 'Получить секунду (0-59)'],
    ['getMilliseconds()', 'Получить миллисекунду (0-999)'],
    ['getTime()', 'Получить время (миллисекунды с 1 января 1970 г.)'],
    // ['', ''],
  ],
  null,
  [
    ['Реферат Date'],
    ['Функционал Date'],
    ['Методы Date'],
  ]
);

add_lesson(
  [
    ['var', 'для var не существует block scope'],
  ],
  null,
  [
    ['NFE'],
    ['Map методы'],
    ['Set методы'],
    ['Реализовать json.parse()'],
    ['Реализовать json.stringify()'],
    ['Decorator some arguments'],
  ]
);

add_lesson(
  [
    ['name', 'возварщает имя функции'],
    ['length', 'возвращает количество аргументов'],
    ['new Function (arg1, arg2, ... argN, functionBody)', 'Ноль или больше имён параметров функции. Имя должно быть строкой, содержащей валидный идентификатор JavaScript. Если параметров несколько, они должны быть разделены запятыми. Например: "x", "theValue", или "a,b".<br> functionBody: Инструкции, из которых состоит тело функции.'],
  ],
);

add_lesson(
  [
    ['Что такое Map', 'Map – это коллекция ключ/значение, как и Object. Но основное отличие в том, что Map позволяет использовать ключи любого типа.'],
    ['new Map()', 'создаёт коллекцию.'],
    ['set(key, value)', 'записывает по ключу key значение value.'],
    ["get(key)", "возвращает значение по ключу или undefined, если ключ key отсутствует"],
    ["has(key)", "возвращает true, если ключ key присутствует в коллекции, иначе false"],
    ["delete(key)", "удаляет элемент (пару «ключ/значение») по ключу key"],
    ["clear()", "очищает коллекцию от всех элементов"],
    ["size", "возвращает текущее количество элементов"],
    ['keys()', ' возвращает итерируемый объект по ключам'],
    ['values()', 'возвращает итерируемый объект по значениям'],
    ['entries()', 'возвращает итерируемый объект по парам вида [ключ, значение], этот вариант используется по умолчанию в for..of'],
  ]
);

add_lesson(
  [
    ['Что такое Set', 'Объект Set – это особый вид коллекции: «множество» значений (без ключей), где каждое значение может появляться только один раз.'],
    ["new Set(iterable)", "создаёт Set, и если в качестве аргумента был предоставлен итерируемый объект (обычно это массив), то копирует его значения в новый Set"],
    ["add(value)", "добавляет значение (если оно уже есть, то ничего не делает), возвращает тот же объект set"],
    ["delete(value)", "удаляет значение, возвращает true, если value было в множестве на момент вызова, иначе false"],
    ["has(value)", "возвращает true, если значение присутствует в множестве, иначе false"],
    ["clear()", "удаляет все имеющиеся значения"],
    ["size", "возвращает количество элементов в множестве"],
    ["keys()", "возвращает перебираемый объект для значений"],
    ["values()", "то же самое, что и set.keys(), присутствует для обратной совместимости с Map"],
    ["entries()", "возвращает перебираемый объект для пар вида [значение, значение],, присутствует для обратной совместимости с Map"],
  ]
);